# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  # - Testing 

  desc "Run tests for integration purposes"
  lane :test_ci do
    prepare

    run_tests(
      app_name: "DBCO",
      device: "iPhone 13 Pro",
      workspace: "DBCO.xcworkspace",
      scheme: "DBCO",
      app_identifier: "nl.rijksoverheid.dbco",
      skip_slack: true,
      force_quit_simulator: true,
      prelaunch_simulator: true
    )
  end


  # - Firebase deploy

  desc "Build and deploy via Firebase"
  private_lane :deploy_to_firebase do
    prepare

    version = get_version_number(xcodeproj: "DBCO.xcodeproj", target: "DBCO", configuration: "Ad Hoc Production")
    build_number = determine_build_number()

    increment_build_number(build_number: build_number, xcodeproj: "DBCO.xcodeproj")

    deploy_test

    deploy_acc

    deploy_staging

    deploy_prod

    inform_slack(
      default_payloads: [:git_author],
      message: "Successfully distributed iOS beta builds #{version} (#{build_number}) to Firebase :rocket:",
    )
  end

  desc "Build and deploy via Firebase from CI"
  lane :deploy_ci do
    setup_ci(provider: "travis", force: true)
    prepare_certificate
    install_provisioning_profile(path: "fastlane/profiles/GGD_DBCO_Ad_Hoc.mobileprovision")

    deploy_to_firebase
  end

  # -- TestFlight --

  desc "Build and deploy production app to TestFlight"
  lane :deploy_to_appstore do
    deploy_to_testflight(
      configuration: "App Store"
    )
  end

  desc "Build and deploy acceptance usertest app to TestFlight"
  lane :deploy_usertest_build_to_appstore do
    deploy_to_testflight(
      configuration: "Testflight Usertest"
    )
  end

  desc "Builds and uploads to Testflight from CI"
  private_lane :deploy_to_testflight do |options|

    ENV["TESTFLIGHT_DEPLOY"] = "true"

    api_key = app_store_connect_api_key(
      key_id: ENV['APP_STORE_API_KEY_ID'],
      issuer_id: ENV["APP_STORE_API_KEY_ISSUER"],
      key_filepath: "appstore-apikey.p8",
      duration: 1200,
    )
    
    # unwrap options:
    xcodeproj =     "DBCO.xcodeproj"
    configuration = options[:configuration]             

    # Prepare:
    setup_ci(provider: "travis", force: true)
    prepare_certificate
    install_provisioning_profile(path: "fastlane/profiles/GGD_DBCO_App_Store.mobileprovision")

    # Version/Build number
    version = get_version_number(xcodeproj: xcodeproj, target: "DBCO", configuration: configuration)
    build_number = app_store_build_number(api_key: api_key, live: false, app_identifier: "nl.rijksoverheid.dbco")
    increment_build_number(build_number: build_number + 1, xcodeproj: xcodeproj)

    # Build:
    build_ios_app(
      scheme: "DBCO",
      configuration: configuration,
      export_options: {
        provisioningProfiles: {
          "nl.rijksoverheid.dbco" => "GGD DBCO App Store"
        }
      }
    )

    upload_to_testflight(skip_submission: true)

    inform_slack(
      default_payloads: [:git_author],
      message: "Successfully distributed iOS app #{version} (#{build_number}) to TestFlight with configuration `#{configuration}` :rocket:",
    )

  end 

  # - Private lanes

  private_lane :prepare do
    #xcversion(version: "13.0")
  end

  private_lane :determine_build_number do |options|
      ENV['GITHUB_RUN_NUMBER']
  end

  private_lane :prepare_certificate do
    import_certificate(
      certificate_path: ENV["CERTIFICATE_PATH"],
      certificate_password: ENV["CERTIFICATE_PASSWORD"],
      keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
      keychain_password: ""
    )
  end

  private_lane :deploy_test do
    build_ios_app(
      scheme: "DBCO",
      configuration: "Ad Hoc Test",
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          "nl.rijksoverheid.dbco" => "GGD DBCO Ad Hoc"
        }
      }
    )

    firebase_app_distribution(
      app: "1:14711935107:ios:58f70d62749507a0074bb6",
      groups: "testers"
    )
  end

  private_lane :deploy_acc do
    build_ios_app(
      scheme: "DBCO",
      configuration: "Ad Hoc Acceptance",
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          "nl.rijksoverheid.dbco" => "GGD DBCO Ad Hoc"
        }
      }
    )

    firebase_app_distribution(
      app: "1:514196416954:ios:2a98a875f55d06368f9583",
      groups: "testers"
    )
  end

  private_lane :deploy_staging do
    build_ios_app(
      scheme: "DBCO",
      configuration: "Ad Hoc Staging",
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          "nl.rijksoverheid.dbco" => "GGD DBCO Ad Hoc"
        }
      }
    )

    firebase_app_distribution(
      app: "1:645386815351:ios:e19e5ef35d873a736c8372",
      groups: "testers"
    )
  end

  private_lane :deploy_prod do
    build_ios_app(
      scheme: "DBCO",
      configuration: "Ad Hoc Production",
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          "nl.rijksoverheid.dbco" => "GGD DBCO Ad Hoc"
        }
      }
    )

    firebase_app_distribution(
      app: "1:1027445500001:ios:8a329354737579567ce220",
      groups: "testers"
    )
  end

  private_lane :inform_slack do |options|
    unless ENV['SLACK_URL'].nil?
      slack(options)
    end
  end

end